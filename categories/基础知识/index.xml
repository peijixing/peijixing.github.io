<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础知识 on 老裴的个人博客</title>
    <link>https://oldpei.site/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
    <description>Recent content in 基础知识 on 老裴的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 19 Feb 2023 12:33:41 +0800</lastBuildDate><atom:link href="https://oldpei.site/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Day03.java的特性和优势</title>
      <link>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%AD%A6%E4%B9%A0/day03.java%E7%9A%84%E7%89%B9%E6%80%A7%E5%92%8C%E4%BC%98%E5%8A%BF/</link>
      <pubDate>Sun, 19 Feb 2023 12:33:41 +0800</pubDate>
      
      <guid>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%AD%A6%E4%B9%A0/day03.java%E7%9A%84%E7%89%B9%E6%80%A7%E5%92%8C%E4%BC%98%E5%8A%BF/</guid>
      <description>java的特性和优势 简单性 面向对象 可移植性 高性能 分布性 动态性 多线程 安全性 健壮性</description>
    </item>
    
    <item>
      <title>Day02.基本DOS命令</title>
      <link>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%AD%A6%E4%B9%A0/day02.%E5%9F%BA%E6%9C%ACdos%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 19 Feb 2023 12:14:16 +0800</pubDate>
      
      <guid>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%AD%A6%E4%B9%A0/day02.%E5%9F%BA%E6%9C%ACdos%E5%91%BD%E4%BB%A4/</guid>
      <description>基本命令之跳转 切换盘符： 盘符 + 冒号 ,例【 D: 】 查看目录下的目录和文件 ： dir 切换目录： cd + 位置 ,例【 cd /path 】 /d参数可以使cd命令跨盘符跳转，例【 cd</description>
    </item>
    
    <item>
      <title>Day01.计算机基础</title>
      <link>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%AD%A6%E4%B9%A0/day01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 19 Feb 2023 11:49:20 +0800</pubDate>
      
      <guid>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%AD%A6%E4%B9%A0/day01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</guid>
      <description>计算机硬件 冯诺依曼体系结构 计算机软件 系统软件 Linux Windows Unix Mac &amp;hellip; 应用软件</description>
    </item>
    
    <item>
      <title>Unsafe</title>
      <link>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/unsafe/</link>
      <pubDate>Mon, 06 Feb 2023 09:42:55 +0800</pubDate>
      
      <guid>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/unsafe/</guid>
      <description>阅读过 JUC 源码的同学，一定会发现很多并发工具类都调用了一个叫做 Unsafe 的类。 那这个类主要是用来干什么的呢？有什么使用场景呢？这篇文章就带你搞清楚！ Unsafe</description>
    </item>
    
    <item>
      <title>Java语法糖</title>
      <link>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/java%E8%AF%AD%E6%B3%95%E7%B3%96/</link>
      <pubDate>Mon, 06 Feb 2023 09:38:29 +0800</pubDate>
      
      <guid>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/java%E8%AF%AD%E6%B3%95%E7%B3%96/</guid>
      <description>content: 这篇文章介绍了 12 种 Java 中常用的语法糖。所谓语法糖就是提供给开发人员便于开发的一种语法而已。但是这种语法只有开发人员认识。要想被执行，需要进行</description>
    </item>
    
    <item>
      <title>反射机制</title>
      <link>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Mon, 06 Feb 2023 09:34:03 +0800</pubDate>
      
      <guid>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/</guid>
      <description>何为反射？ 如果说大家研究过框架的底层原理或者咱们自己写过框架的话，一定对反射这个概念不陌生。 反射之所以被称为框架的灵魂，主要是因为它赋予了我</description>
    </item>
    
    <item>
      <title>序列化和反序列化</title>
      <link>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Mon, 06 Feb 2023 09:04:10 +0800</pubDate>
      
      <guid>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>什么是序列化和反序列化? 如果我们需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。 简单来说： 序列化：</description>
    </item>
    
    <item>
      <title>权限修饰符</title>
      <link>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Mon, 06 Feb 2023 08:53:30 +0800</pubDate>
      
      <guid>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>final 关键字 final 关键字，意思是最终的、不可修改的，最见不得变化 ，用来修饰类、方法和变量，具有以下特点： final 修饰的类不能被继承，final 类中的所有成</description>
    </item>
    
    <item>
      <title>Bigdecimal</title>
      <link>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/bigdecimal/</link>
      <pubDate>Mon, 06 Feb 2023 08:46:57 +0800</pubDate>
      
      <guid>https://oldpei.site/post/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/bigdecimal/</guid>
      <description>《阿里巴巴 Java 开发手册》中提到：“为了避免精度丢失，可以使用 BigDecimal 来进行浮点数的运算”。 浮点数的运算竟然还会有精度丢失的风险吗？确实会！ 示例代码：</description>
    </item>
    
  </channel>
</rss>
